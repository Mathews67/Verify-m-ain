import React, { useState } from 'react';
import { verify_backend } from 'declarations/verify_backend';
import QRCode from 'react-qr-code';
import jsPDF from 'jspdf';
import CertificateTemplate from './CertificateTemplate'; // Import CertificateTemplate
import './TranscriptGenerator.css';  // Importing the custom CSS

const TranscriptGenerator = ({ fetchTotals }) => {
  const [formData, setFormData] = useState({
    name: '',
    program: '',
    year_of_completion: '',
    courses: '',
    year_of_study: ''
  });
  const [generatedCode, setGeneratedCode] = useState('');
  const [qrCodeValue, setQrCodeValue] = useState('');

  const studentOptions = [
    'Mathews Tembo', 'Yedidia Chipanta', 'Tembo Profuse', 
    'Gerald Limbando', 'Anet Namuchimba', 'Gift Siwale', 
    'Mubita Mapulanga', 'Mhango Jeremiah', 'Chiyambi Tembo', 
    'Brian Lupasa Muwema', 'Jacob Shinde', 'Flaviour Chipamba'
  ];

  const programOptions = [
    'Bachelor of Computer Science', 'Database Management System', 'Banking and Finance',
    'Food Science and Nutrition', 'Bachelor of Science in Transport and Logistics',
    'Bachelor of Business Administration', 'Human Resource Management'
  ];

  const courseOptions = [
    'Database Management System', 'Information Security', 'Data Science', 
    'Project Management', 'Digital Forensics', 'Banking and Finance'
  ];

  const yearOfStudyOptions = ['First Year', 'Second Year', 'Third Year', 'Fourth Year'];

  const yearOfCompletionOptions = Array.from(
    { length: 2024 - 2000 + 1 },
    (v, k) => 2000 + k
  ); // Years from 2000 to 2024

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevState) => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleCourseChange = (e) => {
    const selectedCourses = Array.from(e.target.selectedOptions, option => option.value);
    setFormData((prevState) => ({
      ...prevState,
      courses: selectedCourses.join(', ')
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const autoGeneratedId = 'TRANS-' + Math.floor(Math.random() * 1000000); // Auto-generate Transcript ID
    try {
      const result = await verify_backend.createTranscript(
        autoGeneratedId,
        formData.name,
        formData.program,
        formData.year_of_completion,
        formData.courses.split(',').map(course => course.trim())
      );
      setGeneratedCode(result);
      setQrCodeValue(result); // Set QR code value for Certificate Template
      fetchTotals(); // Update totals after generation
    } catch (error) {
      console.error("Error generating transcript:", error);
    }
  };

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    doc.text(`Transcript Code: ${generatedCode}`, 10, 10);
    doc.text(`Name: ${formData.name}`, 10, 20);
    doc.text(`Program: ${formData.program}`, 10, 30);
    doc.text(`Year of Completion: ${formData.year_of_completion}`, 10, 40);
    doc.text(`Courses: ${formData.courses}`, 10, 50);
    doc.text(`Year of Study: ${formData.year_of_study}`, 10, 60);

    // Add QR code to PDF at bottom
    doc.addImage(document.getElementById('qrcode').toDataURL(), 'PNG', 10, 200, 50, 50);
    doc.save('transcript.pdf');
  };

  return (
    <div className="form-container">
      <h2>Generate Transcript</h2>
      <form onSubmit={handleSubmit}>
        <label className="label">Name:</label>
        <select
          className="input-field"
          name="name"
          value={formData.name}
          onChange={handleChange}
          required
        >
          <option value="">Select a student</option>
          {studentOptions.map((student, index) => (
            <option key={index} value={student}>{student}</option>
          ))}
        </select>

        <label className="label">Program:</label>
        <select
          className="input-field"
          name="program"
          value={formData.program}
          onChange={handleChange}
          required
        >
          <option value="">Select a program</option>
          {programOptions.map((program, index) => (
            <option key={index} value={program}>{program}</option>
          ))}
        </select>

        <label className="label">Year of Completion:</label>
        <select
          className="input-field"
          name="year_of_completion"
          value={formData.year_of_completion}
          onChange={handleChange}
          required
        >
          <option value="">Select year of completion</option>
          {yearOfCompletionOptions.map((year) => (
            <option key={year} value={year}>{year}</option>
          ))}
        </select>

        <label className="label">Courses (select multiple):</label>
        <select
          className="input-field"
          multiple={true}
          onChange={handleCourseChange}
        >
          {courseOptions.map((course, index) => (
            <option key={index} value={course}>{course}</option>
          ))}
        </select>

        <label className="label">Year of Study:</label>
        <select
          className="input-field"
          name="year_of_study"
          value={formData.year_of_study}
          onChange={handleChange}
          required
        >
          <option value="">Select year of study</option>
          {yearOfStudyOptions.map((year, index) => (
            <option key={index} value={year}>{year}</option>
          ))}
        </select>

        <button className="button" type="submit">Submit</button>
      </form>

      {generatedCode && (
        <div>
          <h3>Generated Transcript Code: {generatedCode}</h3>
          <div id="qrcode">
            <QRCode value={qrCodeValue} />
          </div>
          <button className="button" onClick={handleDownloadPDF}>Download PDF</button>

          {/* Display certificate template with QR code */}
          <CertificateTemplate
            studentName={formData.name}
            courseName={formData.program}
            issueDate={formData.year_of_completion}
            qrCodeValue={qrCodeValue} // Passing the QR code value to the template
          />
        </div>
      )}
    </div>
  );
};

export default TranscriptGenerator;
